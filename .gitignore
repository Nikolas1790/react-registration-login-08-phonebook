# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

#Junk
.vscode/
.idea/

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

import { useEffect, useState } from 'react';
import { nanoid } from 'nanoid';
import sprite from '../../common/symbol-defs.svg';
import moment from 'moment';

import {
  DayUl,
  DayLi,
  DayNumber,
  StatsWrapper,
  WaterPercentage,
  TodayDiv,
  CurrentMonth,
  MonthSwipe,
  MonthName,
  MonthTitle,
} from './MonthStatsTable.styled';
import { useDispatch, useSelector } from 'react-redux';
import {  waterMonts } from '../../redux/water/operations';
import { selectMounthWater } from '../../redux/water/selector';


const Month = () => {
  const dispatch = useDispatch();
  const mounthHistory = useSelector(selectMounthWater);  

  const [month, setMonth] = useState(new Date().getMonth() + 1);
  const [year, setYear] = useState(new Date().getFullYear());
  const [data, setData] = useState([]);
  
  useEffect(() => {
      setData(mounthHistory);
  }, [mounthHistory]);


  useEffect(() =>  {
    const fetchData = async () => {
      try {
        const currentDate = moment().format('YYYY-MM-DD');
        await dispatch(waterMonts(currentDate));

      } catch (error) {
        console.error("Error fetching data", error);
      }
    };  
    fetchData();
  }, [dispatch]);


  function getDaysInMonth(month, year, data) {
    const days = new Date(year, month, 0).getDate();
    const arrData = [];

    for (let day = 1; day <= days; day++) {
      const fullDate = moment(`${year}-${month}-${day}`, 'YYYY-MM-DD').format('YYYY-MM-DD');
      const event = data.find((event) => event.date === fullDate);

      arrData.push({
        day,
        dailyNormFulfillment: event ? event.dailyNormFulfillment : 0,
      });
    }
    return arrData;
  }

  const daysInMonth = getDaysInMonth(month, year, data);

  const handleMonthChange = (newMonth, newYear) => {
    setMonth(newMonth);
    setYear(newYear);
  };
  const handlePrevMonthClick = () => {
    const newMonth = month === 1 ? 12 : month - 1;
    const newYear = month === 1 ? year - 1 : year;
    handleMonthChange(newMonth, newYear);
  };
  const handleNextMonthClick = () => {
    const newMonth = month === 12 ? 1 : month + 1;
    const newYear = month === 12 ? year + 1 : year;
    handleMonthChange(newMonth, newYear);
  };

  const getFormattedMonthName = () => {
    return `${new Date(year, month - 1)
      .toLocaleString('en-US', { month: 'long' })
      .charAt(0)
      .toUpperCase()}${new Date(year, month - 1)
      .toLocaleString('en-US', { month: 'long' })
      .slice(1)}, ${year}`;
  };
  return (
    <>
      <StatsWrapper>
        <TodayDiv>
          <MonthTitle>Month</MonthTitle>
          <CurrentMonth>        
            <MonthSwipe onClick={handlePrevMonthClick}>   
                <svg width="14" height="14">
                  <use href={`${sprite}#arrow-left`}></use>
                </svg>
            </MonthSwipe>
            <MonthName>{getFormattedMonthName()}</MonthName>            
            <MonthSwipe onClick={handleNextMonthClick}
              disabled={year === new Date().getFullYear() && month === new Date().getMonth() + 1}>
                <svg width="14" height="14">
                  <use href={`${sprite}#arrow-right`}></use>
                </svg>
            </MonthSwipe>
          </CurrentMonth>
        </TodayDiv>
      <DayUl>
        {daysInMonth.map((item) => (
          <DayLi key={nanoid()}>
            <DayNumber>{item.day}</DayNumber>
            <WaterPercentage>{item.dailyNormFulfillment}%</WaterPercentage>
          </DayLi>
        ))}
      </DayUl>
      </StatsWrapper>
    </>
  );
};

export default Month;


import {  createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const token= "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1OGVhNDVhMmM4NGQ0MzYyMzE2ZDQxMCIsImlhdCI6MTcwMzkzMDQxMywiZXhwIjoxNzA0MDE2ODEzfQ.W-a3ClB7NJs8Azphx6KnJsRh94fsRQqC8XN5jWhEiL8"
const apiBaseUrl = 'https://db-water-tracker.onrender.com/api';

export const getUserId = (owner) => {
  return { owner };
};

export const addWaterVolume = createAsyncThunk('water/addWaterVolume', async (data, thunkAPI) => {
  try {
    const response = await axios.post(`${apiBaseUrl}/water`, data);
    thunkAPI.dispatch(fetchWaterDataToday());
    return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const updateWaterVolume = createAsyncThunk('water/updateWaterVolume', async ({ waterId, data }, thunkAPI) => {
  try {
    const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      return response.data;
    // const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data);
    // return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const deleteWaterVolume = createAsyncThunk('water/deleteWaterVolume', async (waterId, thunkAPI) => {
  try {
    const response = await axios.delete(`${apiBaseUrl}/water/${waterId}`);
    return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});


export const fetchWaterDataToday = createAsyncThunk('water/fetchWaterDataToday', async (_, thunkAPI) => {
  try {
    const userId = getUserId();
    const response = await axios.get(`${apiBaseUrl}/today`, {
      params: {
        userId,
      },
    });
    return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message)
  }
});
const setJwtHeader = (token) => {
  axios.defaults.headers.common.Authorization = `Bearer ${token}`;
};

export const waterMonts = createAsyncThunk(
  "auth/monts",

  async (date, thunkAPI) => {
    const state = thunkAPI.getState();
    const persistedToken = state.auth.token;

    if (persistedToken === null) {
      return thunkAPI.rejectWithValue("Unable to fetch user");
    }
    try {
      console.log("mhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhho")
      setJwtHeader(persistedToken);
      const res = await axios.get(`${apiBaseUrl}/month/${date}`);
      console.log("hhhhhhhhhhhhhhhhhhhh")
      # thunkAPI.dispatch(waterMonts(date));
      return res.data.result;
    } catch (error) {
      console.log(error);
      return thunkAPI.rejectWithValue(error.message)
    }
  }
);










export const selectAddWaterVolume = state => state.water.data ;

export const selectTakeWaterHistory = state => state.water.history ;

export const selectStageWater = state => state.water ;

export const selectMounthWater = state => state.water.mounthHistory;






import { createSlice } from '@reduxjs/toolkit';
import { addWaterVolume, deleteWaterVolume, updateWaterVolume, fetchWaterDataToday, waterMonts } from './operations';

import { getUserId } from '../water/operations';

 const waterSlice = createSlice({ 
  name: 'water',
  initialState: {
    percentage: 0,
    data: {
      waterVolume: 0,
      date: new Date().toISOString(),
      owner: null, 
    },
    history: [], 
    mounthHistory: [],
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(addWaterVolume.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(addWaterVolume.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(addWaterVolume.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })

      .addCase(updateWaterVolume.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateWaterVolume.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(updateWaterVolume.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })

      .addCase(deleteWaterVolume.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(deleteWaterVolume.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(deleteWaterVolume.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })

      .addCase(fetchWaterDataToday.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchWaterDataToday.fulfilled, (state, action) => {
        state.loading = false;

        if (action.payload.waterRecords && action.payload.waterRecords.length > 0) {
          const userData = getUserId(action.payload.waterRecords[0].owner);
          const ownerValue = userData.owner;
          state.data.owner = ownerValue;
      
          state.history = action.payload.waterRecords; 
          state.percentage= action.payload.percentage;
        } 
      })
      .addCase(fetchWaterDataToday.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })


      .addCase(waterMonts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(waterMonts.fulfilled, (state, action) => {
        state.loading = false;      
        state.mounthHistory = action.payload;

      })
      .addCase(waterMonts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });

  },
});

export default waterSlice.reducer;























import React, { useEffect, useState } from 'react';
import icons from '../../common/symbol-defs.svg';
import {
  AmountWater,
  BlockAmount,
  BlockAmountText,
  BlockFormula,
  BlockTitle,
  BlockTop,
  ButtonClose,
  ButtonSave,
  ButtonSaveWrap,
  ContainerGender,
  Description,
  DescriptionSpan,
  Formula,
  FormulaSpan,
  InputGender,
  InputStyle,
  LabelGender,
  SecondTitle,
  TextP,
  WrapAmount,
  Wrapper,
} from './EditDailyNorma.styled';
import sprite from '../../common/symbol-defs.svg';
import { toast } from 'react-toastify';
import { useDispatch } from 'react-redux';
import {  saveWaterRate } from '../../redux/auth/authOperationApi';

function EditDailyNorma({ closeModal }) {

  const dispatch = useDispatch();
  const [inputValue, setInputValue] = useState("");
  const [isValidInput, setIsValidInput] = useState(false);


  const [gender, setGender] = useState('girl');
  const [inputValueK, setInputValueK] = useState('');
  const [inputValueT, setInputValueT] = useState('');
  const [calculatedResult, setCalculatedResult] = useState(null);
  const [isValidInputK, setIsValidInputK] = useState(true);
  const [isValidInputT, setIsValidInputT] = useState(true);

  const handleChange = event => {
    setGender(event.target.value);
  };

  const handleInputChange = (event, setInputValue, setIsValidInput) => {
    if (/^\d*$/.test(event.target.value) || isValidInput === false) {
      setInputValue(event.target.value);
      setIsValidInput(true);
    } else {
      setIsValidInput(false);
      toast.error('please enter the numbers');
    }
  };

  const handleInputChangeKilo = event => {
    handleInputChange(event, setInputValueK, setIsValidInputK);
  };

  const handleInputChangeTime = event => {
    handleInputChange(event, setInputValueT, setIsValidInputT);
  };

  const errorBorderStyleK = {
    border: '1px solid #EF5050',
  };
  const errorBorderStyleT = {
    border: '1px solid #EF5050',
  };

  useEffect(() => {
    const waterCalc = () => {
      if (inputValueK && inputValueT && gender) {
        let result;
        if (gender === 'girl') {
          result = inputValueK * 0.03 + inputValueT * 0.4;
        } else {
          result = inputValueK * 0.04 + inputValueT * 0.6;
        }
        result = result.toFixed(1);

        setCalculatedResult(result);
      } else {
        setCalculatedResult(null);
      }
    };
    waterCalc();
  }, [inputValueK, inputValueT, gender]);

  const handleInputChangeValue = event => {
    const inputValue = event.target.value;
    if (/^\d*\.?\d{0,3}$/.test(inputValue) || inputValue === "") {
      setInputValue(inputValue);
      setIsValidInput(true);
    } else {
      setIsValidInput(false);
      toast.error('Please enter valid numbers');
    }
  };
  const saveWater = () => {  
    if(inputValue === '') return toast.info('Fill in the column how much water you will drink');
    if(inputValue === '0') return toast.info('Value must not be 0 L');
    if(inputValue >15) return toast.info('The maximum daily intake cannot exceed 15 L');
      dispatch(saveWaterRate(Number(inputValue)*1000));
      toast.success('Daily water intake changed 👍');
      setInputValue("");
      closeModal();
  };


  return (
    <Wrapper>
      <BlockTop>
        <BlockTitle>My daily norma</BlockTitle>
        <ButtonClose onClick={closeModal}>
          <svg width={12} height={12} stroke="#407BFF">
            <use href={`${icons}#icon-cross`} />
          </svg>
        </ButtonClose>
      </BlockTop>

      <BlockFormula>
        <li>
          <Formula>
            For girl:<FormulaSpan>V=(M*0,03) + (T*0,4)</FormulaSpan>{' '}
          </Formula>
        </li>
        <li>
          <Formula>
            For man:<FormulaSpan>V=(M*0,04) + (T*0,6)</FormulaSpan>
          </Formula>
        </li>
      </BlockFormula>

      <Description>
        <DescriptionSpan>* </DescriptionSpan>V is the volume of the water norm
        in liters per day, M is your body weight, T is the time of active
        sports, or another type of activity commensurate in terms of loads (in
        the absence of these, you must set 0)
      </Description>

      <SecondTitle>Calculate your rate:</SecondTitle>

      <ContainerGender>
        <LabelGender htmlFor="girl">
          {gender === 'girl' ? (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn-active`} />
            </svg>
          ) : (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn`} />
            </svg>
          )}

          <InputGender
            id="girl"
            type="radio"
            name="gender"
            value="girl"
            checked={gender === 'girl'}
            onChange={handleChange}
          />
          <span>For girl</span>
        </LabelGender>

        <LabelGender htmlFor="man">
          {gender === 'girl' ? (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn`} />
            </svg>
          ) : (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn-active`} />
            </svg>
          )}
          <InputGender
            id="man"
            type="radio"
            name="gender"
            value="man"
            checked={gender === 'man'}
            onChange={handleChange}
          />
          <span>For man</span>
        </LabelGender>
      </ContainerGender>

      <TextP>Your weight in kilograms:</TextP>

      <InputStyle
        type="text"
        value={inputValueK}
        onChange={handleInputChangeKilo}
        placeholder="0"
        style={isValidInputK ? {} : errorBorderStyleK}
      />

      <TextP>
        The time of active participation in sports or other activities with a
        high physical. load:
      </TextP>

      <InputStyle
        type="text"
        value={inputValueT}
        onChange={handleInputChangeTime}
        placeholder="0"
        style={isValidInputT ? {} : errorBorderStyleT}
      />
      <BlockAmount>
        <BlockAmountText>
          The required amount of water in liters per day:
        </BlockAmountText>
        <WrapAmount>
          {calculatedResult && <AmountWater>{calculatedResult} L</AmountWater>}
        </WrapAmount>
      </BlockAmount>
      <SecondTitle>Write down how much water you will drink:</SecondTitle>
      <InputStyle
        type="text"
        value={inputValue }
        onChange= {handleInputChangeValue}
        placeholder="Maximum permissible displacement 15 liters"
        max="15"
        pattern="^[0-9]*\.?[0-9]*$"
      />
      <ButtonSaveWrap>
        <ButtonSave type="button" onClick={saveWater}>Save</ButtonSave>
      </ButtonSaveWrap>
    </Wrapper>
  );
}

export default EditDailyNorma;












import {
  Container,
  NormaContainer,
  NormaTitle,
  DailyNormaWrapper,
  NormaP,
  NormaButton,
  ProgressContainer,
  WaterProgress,
  WaterInfo,
  WaterMeter,
  AddWaterButton,
} from './DailyNorma.styled';
import sprite from '../../common/symbol-defs.svg';

import MobileBottle from '../../images/MobileBottle.png';
import MobileBottle2 from '../../images/MobileBottle@2x.png';
import TabletBottle from '../../images/TabletHomeBottle.png';
import TabletBottle2 from '../../images/TabletHomeBottle@2x.png';
import DesktopBottle from '../../images/DesktopHomeBottle.png';
import DesktopBottle2 from '../../images/DesktopHomeBottle@2x.png';
import MainModal from 'components/MainModal/MainModal';
import ModalAddWater from 'components/AddWater/AddWater';
import { useEffect, useState } from 'react';

import { useSelector } from 'react-redux';
import { selectStageWater } from '../../redux/water/selector';
import { toast } from 'react-toastify';
import { selectIsUser } from '../../redux/auth/selectorsAuth';
import EditDailyNorma from 'components/EditDailyNorma/EditDailyNorma';
import Loader from '../Loader/Loader';

const DailyNorma = () => {
  
  const [modalActive, setModalActive] = useState(false);
  const [modalDailyActive, setmodalDailyActive] = useState(false);

  const { percentage } = useSelector(selectStageWater);
  const { waterRate } = useSelector(selectIsUser);

  useEffect(() => {
    const isToastAlreadyShown =
      localStorage.getItem('alreadyShownToast') === 'true';

    if (percentage === 100 && !isToastAlreadyShown) {
      toast.success(
        'Congratulations. Daily water requirement has been reached!'
      );
      localStorage.setItem('alreadyShownToast', 'true');
    } else if (percentage < 100 && isToastAlreadyShown) {
      localStorage.setItem('alreadyShownToast', 'false');
    }
  }, [percentage]);

  return (
    <Container>
      <NormaContainer>
        <NormaTitle>My daily norma</NormaTitle>
        <DailyNormaWrapper>
          {isNaN(waterRate) ? (
            <Loader />
          ) : (
            <>
              <NormaP>{isNaN(waterRate) ? <Loader /> : waterRate / 1000 } L</NormaP>
              <NormaButton onClick={() => setmodalDailyActive(true)}>
                Edit
              </NormaButton>
            </>
          )}
        </DailyNormaWrapper>
      </NormaContainer>
      <picture>
        <source
          media="(min-width: 1440px)"
          srcSet={`${DesktopBottle} 1x, ${DesktopBottle2} 2x`}
          type="image/png"
        />
        <source
          media="(min-width: 768px)"
          srcSet={`${TabletBottle} 1x, ${TabletBottle2} 2x`}
          type="image/png"
        />
        <source
          media="(max-width: 767px)"
          srcSet={`${MobileBottle} 1x, ${MobileBottle2} 2x`}
          type="image/png"
        />
        <img src={DesktopBottle} alt="bottle" />
      </picture>
      <ProgressContainer>
        <WaterProgress>
          <p>Today</p>
          <WaterMeter percentage={percentage}>
            <div />
          </WaterMeter>
          <WaterInfo>
            <span>0%</span>
            <span>50%</span>
            <span>100%</span>
          </WaterInfo>
        </WaterProgress>
        <AddWaterButton onClick={() => setModalActive(true)}>
          <svg width={24} height={24}>
            <use href={`${sprite}#plus-circle`} />
          </svg>
          Add Water
        </AddWaterButton>
      </ProgressContainer>
      
      <MainModal active={modalDailyActive} setActive={setmodalDailyActive}>
        <EditDailyNorma closeModal={() => setmodalDailyActive(false)}  />
      </MainModal>
      <MainModal active={modalActive} setActive={setModalActive}>
        <ModalAddWater closeModal={() => setModalActive(false)} />
      </MainModal>
    </Container>
  );
};
export default DailyNorma;








import {
  ButtonClose,
  ButtonCount,
  InputStyle,
  BlockTop,
  BlockTitle,
  BlockCount,
  BtnCounter,
  ValueP,
  AmountP,
  SelectTime,
  CounterBottom,
  ButtonSave,
  CountSaveBtnBottom,
  Wrapper,
} from './AddWater.styled';
import {
  decrease,
  generateTimeOptions,
  handleUpdateCount,
  setInitialTime,
} from '../Utils/utils';
import React, { useEffect, useState } from 'react';
import icons from '../../common/symbol-defs.svg';

import { useDispatch, useSelector } from 'react-redux';
import { addWaterVolume } from '../../redux/water/operations';
import { selectAddWaterVolume } from '../../redux/water/selector';
import { toast } from 'react-toastify';

function AddWater({ closeModal }) {
  const [count, setCount] = useState(0);
  const [inputValue, setInputValue] = useState('');
  const [selectedTime, setSelectedTime] = useState(0);

  const dispatch = useDispatch();
  const waterData = useSelector(selectAddWaterVolume);

  const handleDecrease = () => {
    decrease(count, setCount);
  };

  const handleInputChange = event => {
    const inputValue = event.target.value;

    // Проверка, чтобы первая цифра не была нулем
    if (/^[1-9]\d*$/.test(inputValue) || inputValue === "") {
      setInputValue(inputValue);
    } else {
      toast.error("Please enter a valid number");
    }
  };

  const handleUpdateCountWrapper = () => {
    handleUpdateCount(inputValue, setCount, setInputValue);
  };

  const handleInputBlur = () => {
    handleUpdateCountWrapper();
  };

  useEffect(() => {
    setInitialTime(setSelectedTime);
  }, []);

  const handleTimeChange = e => {
    setSelectedTime(parseInt(e.target.value, 10));
  };

  const handleSave = () => {
    if (count === 0)
      return toast.info(
        'Amount of water- cannot be zero please enter a value!'
      );
    if(count > 5000) return toast.info('The entered data should not exceed 5000 ml');

    const hours = Math.floor(selectedTime / 60);
    const minutes = selectedTime % 60;
    const currentDate = new Date();
    currentDate.setHours(hours, minutes, 0, 0);

    const data = {
      waterVolume: count,
      date: currentDate.toISOString(),
    };
    toast.success('Data saved 👍');
    dispatch(addWaterVolume(data));
    closeModal();
  };

  return (
    <Wrapper>
      <BlockTop>
        <BlockTitle> Add water</BlockTitle>
        <ButtonClose onClick={closeModal}>
          {' '}
          <svg width={12} height={12} stroke="#407BFF">
            <use href={`${icons}#icon-cross`} />
          </svg>
        </ButtonClose>
      </BlockTop>

      <ValueP>Choose a value:</ValueP>
      <AmountP>Amount of water:</AmountP>

      <BlockCount>
        <ButtonCount onClick={handleDecrease}>
          <svg width={24} height={24} fill="#407BFF">
            <use href={`${icons}#icon-minus`} />
          </svg>
        </ButtonCount>
        <BtnCounter>{count}ml</BtnCounter>
        <ButtonCount onClick={() => setCount(count + 50)}>
          <svg width={24} height={24} fill="#407BFF">
            <use href={`${icons}#icon-plus`} />
          </svg>
        </ButtonCount>
      </BlockCount>

      <AmountP>Recording time:</AmountP>

      <SelectTime value={selectedTime} onChange={handleTimeChange}>
        {generateTimeOptions()}
      </SelectTime>

      <ValueP>Enter the value of the water used:</ValueP>
      <InputStyle
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        onBlur={handleInputBlur}
        placeholder={count}
      />
      <CountSaveBtnBottom>
        <CounterBottom>{count || waterData.waterVolume}ml</CounterBottom>
        <ButtonSave type="button" onClick={handleSave}>
          Save
        </ButtonSave>
      </CountSaveBtnBottom>
    </Wrapper>
  );
}

export default AddWater;















import React, { useEffect, useState } from "react";
import icons from "../../common/symbol-defs.svg";
import {
  AmountWater,
  BlockAmount,
  BlockAmountText,
  BlockFormula,
  BlockTitle,
  BlockTop,
  ButtonClose,
  ButtonSave,
  ButtonSaveWrap,
  ContainerGender,
  Description,
  DescriptionSpan,
  Formula,
  FormulaSpan,
  InputGender,
  InputStyle,
  LabelGender,
  SecondTitle,
  SpanGender,
  TextP,
  WrapAmount,
  Wrapper,
} from "./EditDailyNorma.styled";
import sprite from "../../common/symbol-defs.svg";
import { toast } from "react-toastify";
import { useDispatch } from "react-redux";
import { saveWaterRate } from "../../redux/auth/authOperationApi";

function EditDailyNorma({ closeModal }) {
  const dispatch = useDispatch();
  const [inputValue, setInputValue] = useState("");
  

  const [gender, setGender] = useState("girl");
  const [inputValueK, setInputValueK] = useState("");
  const [inputValueT, setInputValueT] = useState("");
  const [calculatedResult, setCalculatedResult] = useState(null);
  const [isValidInputK, setIsValidInputK] = useState(true);
  const [isValidInputT, setIsValidInputT] = useState(true);

  const handleChange = (event) => {
    setGender(event.target.value);
  };

  const handleInputChange = (event, setInputValue, setIsValidInputT) => {
    const inputValue = event.target.value;
    if (/^\d*$/.test(inputValue) || !inputValue  ) {
      setInputValue(inputValue);
      setIsValidInputT(true);
    } else {
      setIsValidInputT(false);
      toast.error("please enter the numbers");
    }
  };

  const handleInputChangeKilo = (event) => {
    handleInputChange(event, setInputValueK, setIsValidInputK);
  };

  const handleInputChangeTime = (event) => {
    handleInputChange(event, setInputValueT, setIsValidInputT);
  };

  const errorBorderStyleK = {
    border: "1px solid #EF5050",
  };
  const errorBorderStyleT = {
    border: "1px solid #EF5050",
  };

  useEffect(() => {
    const waterCalc = () => {
      if (inputValueK && inputValueT && gender) {
        let result;
        if (gender === "girl") {
          result = inputValueK * 0.03 + inputValueT * 0.4;
        } else {
          result = inputValueK * 0.04 + inputValueT * 0.6;
        }
        result = result.toFixed(1);

        setCalculatedResult(result);
      } else {
        setCalculatedResult(null);
      }
    };
    waterCalc();
  }, [inputValueK, inputValueT, gender]);
  
  const handleInputChangeValue = (event) => {
    const inputValue = event.target.value;
    if (/^[1-9]\d*(?:[.,]\d{0,1})?$/.test(inputValue) || inputValue === "") {
      setInputValue(inputValue);
      
    } else {
      
      toast.error("Please enter valid numbers");
    }
  };

  const saveWater = () => {
    if (inputValue === "") return toast.info("Fill in the column how much water you will drink");
    if(inputValue === '0') return toast.info('Value must not be 0 L');
    if (inputValue > 15) return toast.info("The maximum daily intake cannot exceed 15 L");
    dispatch(saveWaterRate(Number(inputValue) * 1000));
    toast.success("Daily water intake changed 👍");
    setInputValue("");
    closeModal();
  };

  return (
    <Wrapper>
      <BlockTop>
        <BlockTitle>My daily norma</BlockTitle>
        <ButtonClose onClick={closeModal}>
          <svg width={12} height={12} stroke="#407BFF">
            <use href={`${icons}#icon-cross`} />
          </svg>
        </ButtonClose>
      </BlockTop>

      <BlockFormula>
        <li>
          <Formula>
            For girl:<FormulaSpan>V=(M*0,03) + (T*0,4)</FormulaSpan>{" "}
          </Formula>
        </li>
        <li>
          <Formula>
            For man:<FormulaSpan>V=(M*0,04) + (T*0,6)</FormulaSpan>
          </Formula>
        </li>
      </BlockFormula>

      <Description>
        <DescriptionSpan>* </DescriptionSpan>V is the volume of the water norm
        in liters per day, M is your body weight, T is the time of active
        sports, or another type of activity commensurate in terms of loads (in
        the absence of these, you must set 0)
      </Description>

      <SecondTitle>Calculate your rate:</SecondTitle>

      <ContainerGender>
        <LabelGender htmlFor="girl">
          {gender === "girl" ? (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn-active`} />
            </svg>
          ) : (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn`} />
            </svg>
          )}

          <InputGender
            id="girl"
            type="radio"
            name="gender"
            value="girl"
            checked={gender === "girl"}
            onChange={handleChange}
          />
          <SpanGender>For girl</SpanGender>
        </LabelGender>

        <LabelGender htmlFor="man">
          {gender === "girl" ? (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn`} />
            </svg>
          ) : (
            <svg width={14} height={14}>
              <use href={`${sprite}#radio-btn-active`} />
            </svg>
          )}
          <InputGender
            id="man"
            type="radio"
            name="gender"
            value="man"
            checked={gender === "man"}
            onChange={handleChange}
          />
          <SpanGender>For man</SpanGender>
        </LabelGender>
      </ContainerGender>

      <TextP>Your weight in kilograms:</TextP>

      <InputStyle
        type="text"
        value={inputValueK}
        onChange={handleInputChangeKilo}
        placeholder="0"
        style={isValidInputK ? {} : errorBorderStyleK}
      />

      <TextP>
        The time of active participation in sports or other activities with a
        high physical. load:
      </TextP>

      <InputStyle
        type="text"
        value={inputValueT}
        onChange={handleInputChangeTime}
        placeholder="0"
        style={isValidInputT ? {} : errorBorderStyleT}
      />
      <BlockAmount>
        <BlockAmountText>
          The required amount of water in liters per day:
        </BlockAmountText>
        <WrapAmount>
          {calculatedResult && <AmountWater>{calculatedResult} L</AmountWater>}
        </WrapAmount>
      </BlockAmount>
      <SecondTitle>Write down how much water you will drink:</SecondTitle>
      <InputStyle
        type="text"
        value={inputValue}
        onChange={handleInputChangeValue}
        placeholder="Maximum permissible displacement 15 liters"
        max="15"
        pattern="^[1-9][0-9]*\.?[0-9]*$"
      />
      <ButtonSaveWrap>
        <ButtonSave type="button" onClick={saveWater}>
          Save
        </ButtonSave>
      </ButtonSaveWrap>
    </Wrapper>
  );
}

export default EditDailyNorma;










import { Route, Routes } from "react-router-dom";
import { lazy, useState } from "react";
// import HomePage from '../pages/HomePage';
// import SignUpPage from '../pages/SignUpPage';
import Layout from "./SharedLayout/Layout";
// import NotFoundPage from 'pages/NotFoundPage';
// import SigninPage from '../pages/SigninPage';
import {
  RestrictedRouteHomePage,
  RestrictedRouteLogin,
} from "./RestrictedRoute";
import { PrivateRouter } from "./PrivateRoute";
import { useDispatch, useSelector } from "react-redux";
import { useEffect } from "react";
import { refreshUser } from "../redux/auth/authOperationApi";

import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { selectIsUser } from "../redux/auth/selectorsAuth";
import { waterMonts } from "../redux/water/operations";
import Loader from "./Loader/Loader";

const MainPage = lazy(() => import("../pages/Main"));
const HomePage = lazy(() => import("../pages/HomePage"));
const SignUpPage = lazy(() => import("../components/SingIn/SignUp"));
const SigninPage = lazy(() => import("../components/SingIn/SingIn"));
const NotFoundPage = lazy(() => import("../pages/NotFoundPage"));

const App = () => {
  const dispatch = useDispatch();
  const user = useSelector(selectIsUser);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
      try {
        setLoading(true);
         dispatch(refreshUser());
      } catch (error) {
        console.error("Error fetching data:", error);
      } finally {
        setTimeout(() => {
          setLoading(false);
        }, 300); 
      }
  }, [dispatch]);

  useEffect(() => {
      try {
        if (user) {
           dispatch(waterMonts());
        }
      } catch (error) {
        console.error("Error fetching water data:", error);
      }
  }, [dispatch, user]);

  if (loading) {
    return <Loader />;
  }
  
  return (
    <>
      <Routes>
        <Route path="/" element={<Layout />}>
          <Route
            index
            element={
              <RestrictedRouteHomePage
                redirectTo="/HomePage"
                component={<MainPage />}
              />
            }
          />
          {/* <Route index element={<Main />} /> */}
          {/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */}
          <Route
            path="signup"
            element={
              <RestrictedRouteLogin
                redirectTo="/signin"
                component={<SignUpPage />}
              />
            }
          />
          {/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */}
          <Route
            path="signin"
            element={
              <RestrictedRouteHomePage
                redirectTo="/HomePage"
                component={<SigninPage />}
              />
            }
          />
          <Route path="signin" element={<SigninPage />} />
          {/* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */}
          
          <Route
            path="/HomePage"
            element={<PrivateRouter redirectTo="/" component={<HomePage />} />}
          />
          <Route path="*" element={<NotFoundPage />} />
        </Route>
      </Routes>
      <ToastContainer autoClose={1000} className="toast-container"/>
    </>
  );
};

export default App;
