# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

#Junk
.vscode/
.idea/

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*













// import ReactDOM from 'react-dom';
// import React, { useEffect } from 'react';
// import { Content, Modal } from './MainModal.styled';
// import { modalScrollOff } from 'components/Utils/utils';

// const MainModal = ({ active, setActive, children, backgroundColor  }) => {
//   useEffect(() => {
//     const closeModal = e => {
//       if (e.key === 'Escape') {
//         setActive(false);
//       }
//     };

//     if (active) {
//       document.addEventListener('keydown', closeModal);
//       modalScrollOff(true);
//     } else {
//       document.removeEventListener('keydown', closeModal);
//       modalScrollOff(false);
//     }

//     return () => {
//       document.removeEventListener('keydown', closeModal);
//       modalScrollOff(false);
//     };
//   }, [active, setActive]);

  
  

//   return ReactDOM.createPortal(
//     <Modal className={ active ? 'active' : ''}  onClick={() => setActive(false)}>
//       <Content  onClick={e => e.stopPropagation()}>{children}</Content>
//     </Modal>,

//     document.getElementById('modal')
//   );
// };

// export default MainModal;
import ReactDOM from 'react-dom';
import React, { useEffect } from 'react';
import { Content, Modal } from './MainModal.styled';

const MainModal = ({ active, setActive, children, backgroundColor }) => {
  useEffect(() => {
    const closeModal = (e) => {
      if (e.key === 'Escape') {
        setActive(false);
      }
    };

    const handleBodyScroll = (disableScroll) => {
      if (disableScroll) {
        document.body.classList.add('no-scroll');
      } else {
        document.body.classList.remove('no-scroll');
      }
    };

    if (active) {
      document.addEventListener('keydown', closeModal);
      handleBodyScroll(true);
    } else {
      document.removeEventListener('keydown', closeModal);
      handleBodyScroll(false);
    }

    return () => {
      document.removeEventListener('keydown', closeModal);
      handleBodyScroll(true);
    };
  }, [active, setActive]);

  return ReactDOM.createPortal(
    <Modal className={active ? 'active' : ''} onClick={() => setActive(false)}>
      <Content onClick={(e) => e.stopPropagation()}>{children}</Content>
    </Modal>,
    document.getElementById('modal')
  );
};

export default MainModal;