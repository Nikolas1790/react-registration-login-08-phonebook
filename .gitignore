# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

#Junk
.vscode/
.idea/

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*


import { Box } from '@mui/material';
import Modal from '@mui/material/Modal';
import React, { useState, useEffect } from 'react';
import icons from '../../common/symbol-defs.svg';
import {
  style,
  ButtonClose,
  ButtonCount,
  InputStyle,
  BlockTop,
  BlockTitle,
  BlockCount,
  BtnCounter,
  ValueP,
  AmountP,
  SelectTime,
  CounterBottom,
  ButtonSave,
  CountSaveBtnBottom,
} from './AddWater.styled';


import { useDispatch, useSelector } from 'react-redux';
import { addWaterVolume } from '../../redux/water/operations';
import { selectAddWaterVolume } from '../../redux/water/selector'

export default function BasicModal() {
  const dispatch = useDispatch();
  const waterData = useSelector(selectAddWaterVolume );

  const [open, setOpen] = React.useState(false);
  const [count, setCount] = useState(0);
  const [inputValue, setInputValue] = useState('');
  const [selectedTime, setSelectedTime] = useState(0);

  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  const decrease = () => {
    if (count < 50) {
      return setCount(0);
    }
    setCount(count - 50);
  };

  const handleInputChange = event => {
    setInputValue(event.target.value);
  };

  const handleUpdateCount = () => {
    const newValue = parseInt(inputValue, 10);
    if (!isNaN(newValue)) {
      setCount(newValue);
      setInputValue('');
    } else {
      alert('Будь ласка, введіть число.');
    }
  };

  const handleInputBlur = () => {
    handleUpdateCount();
  };

  // *********generator time*****************

  const generateTimeOptions = () => {
    const options = [];
    for (let i = 0; i < 24 * 60; i += 5) {
      const hours = Math.floor(i / 60);
      const minutes = i % 60;
      const timeString = `${hours.toString()}:${minutes
        .toString()
        .padStart(2, '0')}`;
      options.push(
        <option key={i} value={i}>
          {timeString}
        </option>
      );
    }
    return options;
  };
  useEffect(() => {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const currentTime = hours * 60 + minutes;
    setSelectedTime(currentTime - (currentTime % 5));
  }, []);
  const handleTimeChange = e => {
    setSelectedTime(parseInt(e.target.value, 10));
  };


  const handleSave = () => {
    const data = {
      waterVolume: count,
      date: new Date().toISOString(),
    };

    dispatch(addWaterVolume(data));

    handleClose();
  };
  // ******************************************
  return (
    <div>
      <button onClick={handleOpen}>Open modal</button>

      <Modal open={open} onClose={handleClose}>
        <Box sx={style}>
          <div>
            <BlockTop>
              <BlockTitle> Add water</BlockTitle>
              <ButtonClose onClick={handleClose}>
                {' '}
                <svg width={12} height={12} stroke="#407BFF">
                  <use href={`${icons}#icon-cross`} />
                </svg>
              </ButtonClose>
            </BlockTop>

            <ValueP>Choose a value:</ValueP>
            <AmountP>Amount of water:</AmountP>

            <BlockCount>
              <ButtonCount onClick={decrease}>
                <svg width={24} height={24} fill="#407BFF">
                  <use href={`${icons}#icon-minus`} />
                </svg>
              </ButtonCount>
              <BtnCounter>{count}ml</BtnCounter>
              <ButtonCount onClick={() => setCount(count + 50)}>
                <svg width={24} height={24} fill="#407BFF">
                  <use href={`${icons}#icon-plus`} />
                </svg>
              </ButtonCount>
            </BlockCount>

            <AmountP>Recording time:</AmountP>

            <SelectTime value={selectedTime} onChange={handleTimeChange}>
              {generateTimeOptions()}
            </SelectTime>

            <ValueP>Enter the value of the water used:</ValueP>
            <InputStyle
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              onBlur={handleInputBlur}
              placeholder="50"
            />
            <CountSaveBtnBottom>
              <CounterBottom>{waterData.waterVolume}ml</CounterBottom>
              <ButtonSave type="button" onClick={handleSave}>Save</ButtonSave>
            </CountSaveBtnBottom>
          </div>
        </Box>
      </Modal>
    </div>
  );
}


import { Box } from '@mui/material';
import Modal from '@mui/material/Modal';
import React, { useState, useEffect } from 'react';
import icons from '../../common/symbol-defs.svg';
import {
  style,
  ButtonClose,
  ButtonCount,
  InputStyle,
  BlockTop,
  BlockTitle,
  BlockCount,
  BtnCounter,
  ValueP,
  AmountP,
  SelectTime,
  CounterBottom,
  ButtonSave,
  CountSaveBtnBottom,
  BlockWaterTime,
  DataWater,
  DataTime,
} from './EditWaterModal.styled';
import { useDispatch } from 'react-redux';
import { updateWaterVolume } from '../../redux/water/operations';

export default function BasicModalEdit() {
  const dispatch = useDispatch();

  const [open, setOpen] = React.useState(false);
  const [count, setCount] = useState(0);
  const [inputValue, setInputValue] = useState('');
  const [selectedTime, setSelectedTime] = useState(0);

  const handleOpen = () => setOpen(true);
  const handleClose = () => setOpen(false);

  const decrease = () => {
    if (count < 50) {
      return setCount(0);
    }
    setCount(count - 50);
  };

  const handleInputChange = event => {
    setInputValue(event.target.value);
  };

  const handleUpdateCount = () => {
    const newValue = parseInt(inputValue, 10);
    if (!isNaN(newValue)) {
      setCount(newValue);
      setInputValue('');
    } else {
      alert('Будь ласка, введіть число.');
    }
  };

  const handleInputBlur = () => {
    handleUpdateCount();
  };

  // *********generator time*****************

  const generateTimeOptions = () => {
    const options = [];
    for (let i = 0; i < 24 * 60; i += 5) {
      const hours = Math.floor(i / 60);
      const minutes = i % 60;
      const timeString = `${hours.toString()}:${minutes
        .toString()
        .padStart(2, '0')}`;
      options.push(
        <option key={i} value={i}>
          {timeString}
        </option>
      );
    }
    return options;
  };
  useEffect(() => {
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const currentTime = hours * 60 + minutes;
    setSelectedTime(currentTime - (currentTime % 5));
  }, []);
  const handleTimeChange = e => {
    setSelectedTime(parseInt(e.target.value, 10));
  };


  const handleSave = () => {

  const waterId = '658b508d3a52d172c967c733';
  dispatch(updateWaterVolume({ waterId, data: { waterVolume: count } }));

  handleClose();
    
  };

  // ******************************************
  return (
    <div>
      <button onClick={handleOpen}>Open modal Edit</button>

      <Modal open={open} onClose={handleClose}>
        <Box sx={style}>
          <div>
            <BlockTop>
              <BlockTitle>Edit the entered amount of water</BlockTitle>
              <ButtonClose onClick={handleClose}>
                {' '}
                <svg width={12} height={12} stroke="#407BFF">
                  <use href={`${icons}#icon-cross`} />
                </svg>
              </ButtonClose>
            </BlockTop>
            <BlockWaterTime><svg width={36} height={36} fill="#407BFF">
                  <use href={`${icons}#icon-glass`} />
                </svg>
                <DataWater>water</DataWater>
               <DataTime>time</DataTime>
            </BlockWaterTime>
            <ValueP>Correct entered data:</ValueP>
            <AmountP>Amount of water:</AmountP>

            <BlockCount>
              <ButtonCount onClick={decrease}>
                <svg width={24} height={24} fill="#407BFF">
                  <use href={`${icons}#icon-minus`} />
                </svg>
              </ButtonCount>
              <BtnCounter>{count}ml</BtnCounter>
              <ButtonCount onClick={() => setCount(count + 50)}>
                <svg width={24} height={24} fill="#407BFF">
                  <use href={`${icons}#icon-plus`} />
                </svg>
              </ButtonCount>
            </BlockCount>

            <AmountP>Recording time:</AmountP>

            <SelectTime value={selectedTime} onChange={handleTimeChange}>
              {generateTimeOptions()}
            </SelectTime>

            <ValueP>Enter the value of the water used:</ValueP>
            <InputStyle
              type="text"
              value={inputValue}
              onChange={handleInputChange}
              onBlur={handleInputBlur}
              placeholder="50"
            />
            <CountSaveBtnBottom>
              <CounterBottom>{count}ml</CounterBottom>
              <ButtonSave type="button" onClick={handleSave}>Save</ButtonSave>
            </CountSaveBtnBottom>
          </div>
        </Box>
      </Modal>
    </div>
  );
}


import {  createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const token= "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1OGI0NjVlMzY0M2UyZmY3NmQyZThhMyIsImlhdCI6MTcwMzYyNjM0NCwiZXhwIjoxNzAzNzEyNzQ0fQ.PexBhz3IOpKtgjkHRN0ZXOdba03XiA7R2q1nPigng1A"
const apiBaseUrl = 'https://db-water-tracker.onrender.com/api';

export const addWaterVolume = createAsyncThunk('water/addWaterVolume', async (data, thunkAPI) => {
  try {
    const response = await axios.post(`${apiBaseUrl}/water`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
    // const response = await axios.post(`${apiBaseUrl}/water`, data);
    // return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const updateWaterVolume = createAsyncThunk('water/updateWaterVolume', async ({ waterId, data }, thunkAPI) => {
  try {
    const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      return response.data;
    // const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data);
    // return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const deleteWaterVolume = createAsyncThunk('water/deleteWaterVolume', async (waterId, thunkAPI) => {
  try {
    const response = await axios.delete(`${apiBaseUrl}/water/${waterId}`);
    return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

import {  createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const token= "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1OGI0NjVlMzY0M2UyZmY3NmQyZThhMyIsImlhdCI6MTcwMzYyNjM0NCwiZXhwIjoxNzAzNzEyNzQ0fQ.PexBhz3IOpKtgjkHRN0ZXOdba03XiA7R2q1nPigng1A"
const apiBaseUrl = 'https://db-water-tracker.onrender.com/api';

export const addWaterVolume = createAsyncThunk('water/addWaterVolume', async (data, thunkAPI) => {
  try {
    const response = await axios.post(`${apiBaseUrl}/water`, data, {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });
    return response.data;
    // const response = await axios.post(`${apiBaseUrl}/water`, data);
    // return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const updateWaterVolume = createAsyncThunk('water/updateWaterVolume', async ({ waterId, data }, thunkAPI) => {
  try {
    const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      return response.data;
    // const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data);
    // return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const deleteWaterVolume = createAsyncThunk('water/deleteWaterVolume', async (waterId, thunkAPI) => {
  try {
    const response = await axios.delete(`${apiBaseUrl}/water/${waterId}`);
    return response.data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});


export const selectAddWaterVolume = state => state.water.data ;

// export const selectUpdateWaterVolume = state => state.water.data ;

// export const selectAddWaterVolume = state => state.water.data ;




// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
// import axios from 'axios';

// const token= "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1OGI0NjVlMzY0M2UyZmY3NmQyZThhMyIsImlhdCI6MTcwMzYyNjM0NCwiZXhwIjoxNzAzNzEyNzQ0fQ.PexBhz3IOpKtgjkHRN0ZXOdba03XiA7R2q1nPigng1A"
// const apiBaseUrl = 'https://db-water-tracker.onrender.com/api';

// export const addWaterVolume = createAsyncThunk('water/addWaterVolume', async (data, thunkAPI) => {
//   try {
//     const response = await axios.post(`${apiBaseUrl}/water`, data, {
//       headers: {
//         Authorization: `Bearer ${token}`,
//       },
//     });
//     return response.data;
//     // const response = await axios.post(`${apiBaseUrl}/water`, data);
//     // return response.data;
//   } catch (error) {
//     return thunkAPI.rejectWithValue(error.message);
//   }
// });

// export const updateWaterVolume = createAsyncThunk('water/updateWaterVolume', async ({ waterId, data }, thunkAPI) => {
//   try {
//     const response = await axios.patch(`${apiBaseUrl}/water/${waterId}/water-volume`, data);
//     return response.data;
//   } catch (error) {
//     return thunkAPI.rejectWithValue(error.message);
//   }
// });

// export const deleteWaterVolume = createAsyncThunk('water/deleteWaterVolume', async (waterId, thunkAPI) => {
//   try {
//     const response = await axios.delete(`${apiBaseUrl}/water/${waterId}`);
//     return response.data;
//   } catch (error) {
//     return thunkAPI.rejectWithValue(error.message);
//   }
// });
import { createSlice } from '@reduxjs/toolkit';
import { addWaterVolume, deleteWaterVolume, updateWaterVolume } from './operations';


 const waterSlice = createSlice({ 
  name: 'water',
  initialState: {
    data: {
      waterVolume: 0,
      date: new Date().toISOString(),
      owner: null, 
    },
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(addWaterVolume.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(addWaterVolume.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(addWaterVolume.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })

      .addCase(updateWaterVolume.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(updateWaterVolume.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(updateWaterVolume.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })

      .addCase(deleteWaterVolume.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(deleteWaterVolume.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(deleteWaterVolume.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })

  },
});

export default waterSlice.reducer;



import { configureStore } from "@reduxjs/toolkit";
import persistReducer from "redux-persist/es/persistReducer";
import storage from "redux-persist/lib/storage";
import {
  FLUSH,
  PAUSE,
  PERSIST,
  PURGE,
  REGISTER,
  REHYDRATE,
} from "redux-persist";
import persistStore from "redux-persist/es/persistStore";
import { authorizationReducer } from "./redux/auth/sliceAuth";
import  waterSlice from "./redux/water/waterSlice";


const authPersistConfig = {
  key: "auth",
  storage,
  whitelist: ["token"],
};

export const store = configureStore({
  reducer: {
    auth: persistReducer(authPersistConfig, authorizationReducer),
    water: waterSlice,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({
      serializableCheck: {
        ignoreActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],
      },
    }),
  devTools: process.env.NODE_ENV === "development",
});

export const persistor = persistStore(store);
